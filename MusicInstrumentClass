using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

// all audioclips must be named in the pattern
// 
//     SampleFileName_Desiredoctave_Notename
//     SampleFileName_Desiredoctave_Notenameb
//     SampleFileName_Desiredoctave_Notenames
// 
//      I.E.
//      Piano_3_Ab

//it is most helpful if your containing files are named after Instruments
// Instrument Name needs to be the same as FileName

public class Instrument : MonoBehaviour
{ 
    public Object SampleFile;
    [HideInInspector]
    public Object[] UnsortedSamples;
    public List<AudioClip> Samples;

    //how samples are sorted in order
    int Octaves = 3;      //amount of octaves per instrument
    int Notes = 12;     //amount of notes per octave SHOULD BE CONSTANT
    // more can be added 
    /// accents
    /// Articulation
    /// small samples
    /// 
    /// exponentially increases work done need better solution like editing at run time

    public int InstrumentOctaveOffset;  //starting octave of instrument starting at 1

    //can be called by note name as well as note int

    public enum NoteName
    {
        A,As,Bb,B,C,Cs,Db,D,Ds,Eb,E,Es,Fb,F,G,Gs,Ab
    }

    #region Sorting

    private void OnEnable()
    {
        PullSamples();
        SortByOctaveByNote();
        //delete unsorted samples
    }

    private void PullSamples()
    { 
        string path;
        path = AssetDatabase.GetAssetPath(SampleFile);
        UnsortedSamples = Resources.LoadAll(path);
    }

    private void SortByOctaveByNote()
    {
        for (int a = 0; a < UnsortedSamples.Length; a++)
        {
            string sampleName = UnsortedSamples[a].name;
            string fileName = SampleFile.name;

            if(string.CompareOrdinal(sampleName, 0, fileName, 0, fileName.Length) == 0)
            {
                /*naming convention is
                    Filename_Octave#_noteName
                    filename.length_#_#
                    filename.Length_#_##
                */

                int displayedOctave = System.Convert.ToInt16(sampleName.Substring(fileName.Length+1));
                int Octave = displayedOctave - InstrumentOctaveOffset;

                string noteName = sampleName.Substring(fileName.Length + 1 + 2);
                

                /// HOW THE FUCK DO I GET INT DATA FROM STRINGS LIKE THIS FML
            }

            }
        }
    }

    #endregion

    #region Call Funtions
    public int GetSoundID(int Octave, int Note)
    {
        int SoundID;

        SoundID = (Octave-1)*Notes+Note-1;

        return SoundID;
    }

    public int GetSoundID( int note)
    {
        int octave = (note / 12) + 1;
        note = note % 12;

        return GetSoundID(octave, note);
    }

    public int GetSoundID(int octave, NoteName note)
    {
        int noteInt;

        switch (note)
        {
            case NoteName.A:
                noteInt = 1;
                break;
            case NoteName.As:
                noteInt = 2;
                break;
            case NoteName.Bb:
                noteInt = 2;
                break;
            case NoteName.B:
                noteInt = 3;
                break;
            case NoteName.C:
                noteInt = 4;
                break;
            case NoteName.Cs:
                noteInt = 5;
                break;
            case NoteName.Db:
                noteInt = 5;
                break;
            case NoteName.D:
                noteInt = 6;
                break;
            case NoteName.Ds:
                noteInt = 7;
                break;
            case NoteName.Eb:
                noteInt = 7;
                break;
            case NoteName.E:
                noteInt = 8;
                break;
            case NoteName.Es:
                noteInt = 9;
                break;
            case NoteName.Fb:
                noteInt = 9;
                break;
            case NoteName.F:
                noteInt = 10;
                break;
            case NoteName.G:
                noteInt = 11;
                break;
            case NoteName.Gs:
                noteInt = 12;
                break;
            case NoteName.Ab:
                noteInt = 12;
                break;
            default:
                noteInt = 1;
                break;
        }

        return GetSoundID(octave, noteInt);
    }
    #endregion
}
